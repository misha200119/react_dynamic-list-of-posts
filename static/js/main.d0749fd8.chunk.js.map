{"version":3,"sources":["api/api.ts","api/comments.ts","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getRequest","bodyRequest","a","fetch","response","ok","Error","status","text","json","postRequest","objInJSON","method","body","headers","deleteRequest","getPostCommentsById","postId","addPostCommentById","comment","JSON","stringify","removePostCommetById","commentId","getUsersPosts","getUserPostsById","userId","getPostDetailsById","Loader","className","NewCommentForm","React","memo","selectedPostId","getPostDetails","useState","name","setName","email","setEmail","setBody","isUploadComment","setIsUploadComment","catchSubmit","useCallback","e","preventDefault","preparedObject","onSubmit","type","placeholder","value","onChange","target","required","PostDetails","selectedPostDetails","setSelectedPostDetails","commentsForSelectedPost","setCommentsForSelectedPost","commentsIsShowing","setCommentsIsShowing","someCommentIsDeleting","setSomeCommentIsDeleting","Promise","all","post","comments","console","log","useEffect","onClick","prevValue","length","map","id","PostsList","setSelectedPostId","posts","setPosts","isPostListLoading","setIsPostListLoading","filterByUserId","setFilterByUserId","getUserPosts","neededPosts","title","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0749fd8.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getRequest = async (bodyRequest: string) => {\n  const response = await fetch(`${BASE_URL}${bodyRequest}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}| ${response.text}`);\n  }\n\n  return response.json();\n};\n\nexport const postRequest = async (bodyRequest: string, objInJSON: string) => {\n  await fetch(`${BASE_URL}${bodyRequest}`, {\n    method: 'POST',\n    body: objInJSON,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nexport const deleteRequest = async (bodyRequest: string) => {\n  await fetch(`${BASE_URL}${bodyRequest}`, {\n    method: 'DELETE',\n  });\n};\n","import { Comment } from '../types/Comment';\nimport { getRequest, postRequest, deleteRequest } from './api';\n\nexport const getPostCommentsById\n  = async (postId: number): Promise<Array<Comment>> => {\n    return getRequest(`/comments?postId=${postId}`);\n  };\n\nexport const addPostCommentById\n= async (\n  comment: Omit<Comment, 'id'>,\n): Promise<void> => {\n  return postRequest('/comments', JSON.stringify(comment));\n};\n\nexport const removePostCommetById\n= async (commentId: number): Promise<void> => {\n  return deleteRequest(`/comments/${commentId}`);\n};\n","import { Post } from '../types/Post';\nimport { getRequest } from './api';\n\nexport const getUsersPosts = async (): Promise<Array<Post>> => {\n  return getRequest('/posts');\n};\n\nexport const getUserPostsById\n  = async (userId: number): Promise<Array<Post>> => {\n    return getRequest(`/posts?userId=${userId}`);\n  };\n\nexport const getPostDetailsById = async (postId: number): Promise<Post> => {\n  return getRequest(`/posts/${postId}`);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { SyntheticEvent, useCallback, useState } from 'react';\nimport { addPostCommentById } from '../../api/comments';\nimport { Loader } from '../Loader';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  getPostDetails: () => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  selectedPostId,\n  getPostDetails,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isUploadComment, setIsUploadComment] = useState(false);\n\n  const catchSubmit = useCallback(async (e: SyntheticEvent) => {\n    e.preventDefault();\n\n    setIsUploadComment(true);\n\n    const preparedObject = {\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    };\n\n    await addPostCommentById(preparedObject);\n    getPostDetails();\n  }, [selectedPostId, name, email, body]);\n\n  return (\n    <>\n      {!isUploadComment\n        ? (\n          <form className=\"NewCommentForm\" onSubmit={catchSubmit}>\n            <div className=\"form-field\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Your name\"\n                className=\"NewCommentForm__input\"\n                value={name}\n                onChange={({ target }) => {\n                  setName(target.value);\n                }}\n                required\n              />\n            </div>\n            <div className=\"form-field\">\n              <input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Your email\"\n                className=\"NewCommentForm__input\"\n                value={email}\n                onChange={({ target }) => {\n                  setEmail(target.value);\n                }}\n                required\n              />\n            </div>\n            <div className=\"form-field\">\n              <textarea\n                name=\"body\"\n                placeholder=\"Type comment here\"\n                className=\"NewCommentForm__input\"\n                value={body}\n                onChange={({ target }) => {\n                  setBody(target.value);\n                }}\n                required\n              />\n            </div>\n            <button\n              type=\"submit\"\n              className=\"NewCommentForm__submit-button button\"\n            >\n              Add a comment\n            </button>\n          </form>\n        )\n        : (\n          <>\n            <h2>\n              Updating data\n            </h2>\n            <Loader />\n          </>\n        )}\n    </>\n  );\n});\n","/* eslint-disable no-console */\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { getPostCommentsById, removePostCommetById } from '../../api/comments';\nimport { getPostDetailsById } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../../types/Comment';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPostId,\n}) => {\n  const [selectedPostDetails, setSelectedPostDetails]\n    = useState<Post | null>(null);\n  const [commentsForSelectedPost, setCommentsForSelectedPost]\n    = useState<Array<Comment> | []>([]);\n  const [commentsIsShowing, setCommentsIsShowing] = useState(true);\n  const [someCommentIsDeleting, setSomeCommentIsDeleting] = useState(false);\n\n  const getPostDetails = useCallback(async () => {\n    try {\n      setSelectedPostDetails(null);\n      const [post, comments] = await Promise.all([\n        getPostDetailsById(selectedPostId),\n        getPostCommentsById(selectedPostId),\n      ]);\n\n      setSelectedPostDetails(post);\n      setCommentsForSelectedPost(comments);\n    } catch (e) {\n      console.log(`can't load data from serever: ${e}`);\n    }\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPostDetails();\n  }, [selectedPostId]);\n\n  return (\n    <>\n      {selectedPostDetails && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{selectedPostDetails?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setCommentsIsShowing((prevValue) => !prevValue);\n              }}\n            >\n              {`${commentsIsShowing ? 'Hide' : 'Show'} ${commentsForSelectedPost.length} comments`}\n            </button>\n\n            {(commentsIsShowing && commentsForSelectedPost.length > 0) && (\n              <ul className=\"PostDetails__list\">\n                {commentsForSelectedPost.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={async () => {\n                        setSomeCommentIsDeleting(true);\n                        await removePostCommetById(comment.id);\n                        setSomeCommentIsDeleting(false);\n                        getPostDetails();\n                      }}\n                    >\n                      {someCommentIsDeleting ? <Loader /> : 'X'}\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                getPostDetails={getPostDetails}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n      {!selectedPostDetails && (\n        <Loader />\n      )}\n    </>\n  );\n});\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getUserPostsById, getUsersPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  setSelectedPostId: (React.Dispatch<React.SetStateAction<number>>),\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  setSelectedPostId,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Array<Post> | null>(null);\n  const [isPostListLoading, setIsPostListLoading] = useState(false);\n  const [filterByUserId, setFilterByUserId] = useState(0);\n\n  const getUserPosts = useCallback(async () => {\n    try {\n      setIsPostListLoading(true);\n      setPosts(null);\n      setSelectedPostId(0);\n\n      let neededPosts;\n\n      if (filterByUserId === 0) {\n        neededPosts = await getUsersPosts();\n      } else {\n        neededPosts = await getUserPostsById(filterByUserId);\n      }\n\n      setPosts(neededPosts);\n    } catch (e) {\n      console.log(`can't load data from serever: ${e}`);\n    }\n\n    setIsPostListLoading(false);\n  }, [filterByUserId]);\n\n  useEffect(() => {\n    getUserPosts();\n  }, [filterByUserId]);\n\n  return (\n    <>\n      <header className=\"PostsList__filter-props-block\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={filterByUserId}\n            onChange={({ target }) => {\n              setFilterByUserId(+target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      {!posts ? (\n        <h2>\n          No one posts is avalible\n        </h2>\n      )\n        : (\n          <div className=\"PostsList\">\n            <h2>Posts:</h2>\n\n            <ul className=\"PostsList__list\">\n              {posts.map((post) => (\n                <li\n                  key={post.id}\n                  className=\"PostsList__item\"\n                >\n                  <div>\n                    <b>\n                      [User #\n                      {post.userId}\n                      ]:\n                    </b>\n                    {post.title}\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      if (selectedPostId === post.id) {\n                        setSelectedPostId(0);\n\n                        return;\n                      }\n\n                      setSelectedPostId(post.id);\n                    }}\n                  >\n                    {selectedPostId === post.id\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      {isPostListLoading && (\n        <Loader />\n      )}\n    </>\n  );\n});\n","import React, { useState } from 'react';\nimport { PostDetails } from './components/PostDetails';\nimport { PostsList } from './components/PostsList';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC<{}> = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n        {!!selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}