{"version":3,"sources":["api/api.ts","api/comments.ts","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getRequest","bodyRequest","a","fetch","response","ok","Error","status","text","json","postRequest","objInJSON","method","body","headers","deleteRequest","getPostCommentsById","postId","addPostCommentById","comment","JSON","stringify","removePostCommetById","commentId","getUsersPosts","getUserPostsById","userId","getPostDetailsById","Loader","className","NewCommentForm","selectedPostId","addSelectedPostComment","initialState","name","email","initialError","useState","newComment","setNewComment","newCommentError","setNewCommentError","isUploadComment","setIsUploadComment","catchInpChange","useCallback","event","target","value","prev","catchSubmit","preventDefault","trim","validComment","Object","values","every","item","String","validErrors","some","onSubmit","type","placeholder","onChange","PostDetails","React","memo","selectedPostDetails","setSelectedPostDetails","commentsForSelectedPost","setCommentsForSelectedPost","commentsIsShowing","setCommentsIsShowing","someCommentIsDeleting","setSomeCommentIsDeleting","prevValue","id","length","removeSelectedPostComment","filter","removeCommentBtnClickHandler","getPostDetails","Promise","all","post","comments","console","log","useEffect","onClick","map","PostsList","setSelectedPostId","posts","setPosts","isPostListLoading","setIsPostListLoading","filterByUserId","setFilterByUserId","getUserPosts","neededPosts","title","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.577c3705.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getRequest = async (bodyRequest: string) => {\n  const response = await fetch(`${BASE_URL}${bodyRequest}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}| ${response.text}`);\n  }\n\n  return response.json();\n};\n\nexport const postRequest = async (bodyRequest: string, objInJSON: string) => {\n  await fetch(`${BASE_URL}${bodyRequest}`, {\n    method: 'POST',\n    body: objInJSON,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nexport const deleteRequest = async (bodyRequest: string) => {\n  await fetch(`${BASE_URL}${bodyRequest}`, {\n    method: 'DELETE',\n  });\n};\n","import { Comment } from '../types/Comment';\nimport { getRequest, postRequest, deleteRequest } from './api';\n\nexport const getPostCommentsById\n  = async (postId: number): Promise<Array<Comment>> => {\n    return getRequest(`/comments?postId=${postId}`);\n  };\n\nexport const addPostCommentById\n= async (\n  comment: Omit<Comment, 'id'>,\n): Promise<void> => {\n  return postRequest('/comments', JSON.stringify(comment));\n};\n\nexport const removePostCommetById\n= async (commentId: number): Promise<void> => {\n  return deleteRequest(`/comments/${commentId}`);\n};\n","import { Post } from '../types/Post';\nimport { getRequest } from './api';\n\nexport const getUsersPosts = async (): Promise<Array<Post>> => {\n  return getRequest('/posts');\n};\n\nexport const getUserPostsById\n  = async (userId: number): Promise<Array<Post>> => {\n    return getRequest(`/posts?userId=${userId}`);\n  };\n\nexport const getPostDetailsById = async (postId: number): Promise<Post> => {\n  return getRequest(`/posts/${postId}`);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  ChangeEvent, FormEvent, useCallback, useState,\n} from 'react';\nimport { addPostCommentById } from '../../api/comments';\nimport { Loader } from '../Loader';\nimport { Comment } from '../../types/Comment';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  addSelectedPostComment: (comment: Omit<Comment, 'id'>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  addSelectedPostComment,\n}) => {\n  const initialState = {\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const initialError = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(initialState);\n  const [newCommentError, setNewCommentError] = useState(initialError);\n\n  const [isUploadComment, setIsUploadComment] = useState(false);\n\n  const catchInpChange = useCallback(async (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { value, name } = event.target;\n\n    setNewComment(prev => ({ ...prev, [name]: value, postId: selectedPostId }));\n  }, [selectedPostId, newComment]);\n\n  const catchSubmit = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    setNewCommentError({ ...initialError });\n\n    if (!newComment.name.trim()) {\n      setNewCommentError(prev => ({ ...prev, name: 'Enter title!' }));\n    }\n\n    if (!newComment.body.trim()) {\n      setNewCommentError(prev => ({ ...prev, body: 'Enter comment!' }));\n    }\n\n    if (!newComment.email.trim()) {\n      setNewCommentError(prev => ({ ...prev, email: 'Enter email!' }));\n    }\n\n    const validComment = Object.values(newComment)\n      .every(item => String(item).trim());\n    const validErrors = Object.values(newCommentError).some(item => item);\n\n    if (validComment && !validErrors) {\n      setIsUploadComment(true);\n      await addPostCommentById(newComment);\n      addSelectedPostComment(newComment);\n\n      setIsUploadComment(false);\n      setNewComment(initialState);\n    }\n  }, [newComment, newCommentError, addSelectedPostComment]);\n\n  return (\n    <>\n      {!isUploadComment\n        ? (\n          <form\n            className=\"NewCommentForm\"\n            onSubmit={catchSubmit}\n          >\n            <div className=\"form-field\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Your name\"\n                className=\"NewCommentForm__input\"\n                onChange={catchInpChange}\n                value={newComment.name}\n              />\n              {newCommentError.name && (\n                <p className=\"error-message\">{newCommentError.name}</p>\n              )}\n            </div>\n\n            <div className=\"form-field\">\n              <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Your email\"\n                className=\"NewCommentForm__input\"\n                onChange={catchInpChange}\n                value={newComment.email}\n              />\n              {newCommentError.email && (\n                <p className=\"error-message\">{newCommentError.email}</p>\n              )}\n            </div>\n\n            <div className=\"form-field\">\n              <textarea\n                name=\"body\"\n                placeholder=\"Type comment here\"\n                className=\"NewCommentForm__input\"\n                onChange={catchInpChange}\n                value={newComment.body}\n              />\n              {newCommentError.body && (\n                <p className=\"error-message\">{newCommentError.body}</p>\n              )}\n\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"NewCommentForm__submit-button button\"\n            >\n              Add a comment\n            </button>\n          </form>\n        )\n        : (\n          <>\n            <h2>\n              Updating data\n            </h2>\n            <Loader />\n          </>\n        )}\n    </>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { getPostCommentsById, removePostCommetById } from '../../api/comments';\nimport { getPostDetailsById } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../../types/Comment';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPostId,\n}) => {\n  const [selectedPostDetails, setSelectedPostDetails]\n    = useState<Post | null>(null);\n  const [commentsForSelectedPost, setCommentsForSelectedPost]\n    = useState<Array<Comment> | []>([]);\n  const [commentsIsShowing, setCommentsIsShowing] = useState(true);\n  const [someCommentIsDeleting, setSomeCommentIsDeleting] = useState(false);\n\n  const addSelectedPostComment\n  = useCallback((comment: Omit<Comment, 'id'>) => {\n    setCommentsForSelectedPost(prevValue => [\n      ...prevValue,\n      { ...comment, id: prevValue.length + 1 },\n    ]);\n  }, [commentsForSelectedPost]);\n  const removeSelectedPostComment\n  = useCallback((id: number) => {\n    setCommentsForSelectedPost(\n      prevValue => prevValue.filter(comment => comment.id !== id),\n    );\n  }, [commentsForSelectedPost]);\n\n  const removeCommentBtnClickHandler = useCallback(async (id: number) => {\n    setSomeCommentIsDeleting(true);\n    await removePostCommetById(id);\n    removeSelectedPostComment(id);\n    setSomeCommentIsDeleting(false);\n  }, [removeSelectedPostComment]);\n\n  const getPostDetails = useCallback(async () => {\n    try {\n      setSelectedPostDetails(null);\n      const [post, comments] = await Promise.all([\n        getPostDetailsById(selectedPostId),\n        getPostCommentsById(selectedPostId),\n      ]);\n\n      setSelectedPostDetails(post);\n      setCommentsForSelectedPost(comments);\n    } catch (e) {\n      console.log(`can't load data from serever: ${e}`);\n    }\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPostDetails();\n  }, [selectedPostId]);\n\n  return (\n    <>\n      {selectedPostDetails && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{selectedPostDetails?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setCommentsIsShowing((prevValue) => !prevValue);\n              }}\n            >\n              {`${commentsIsShowing ? 'Hide' : 'Show'} ${commentsForSelectedPost.length} comments`}\n            </button>\n\n            {(commentsIsShowing && commentsForSelectedPost.length > 0) && (\n              <ul className=\"PostDetails__list\">\n                {commentsForSelectedPost.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeCommentBtnClickHandler(comment.id);\n                      }}\n                    >\n                      {someCommentIsDeleting ? <Loader /> : 'X'}\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                addSelectedPostComment={addSelectedPostComment}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n      {!selectedPostDetails && (\n        <Loader />\n      )}\n    </>\n  );\n});\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getUserPostsById, getUsersPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  setSelectedPostId: (React.Dispatch<React.SetStateAction<number>>),\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  setSelectedPostId,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Array<Post> | null>(null);\n  const [isPostListLoading, setIsPostListLoading] = useState(false);\n  const [filterByUserId, setFilterByUserId] = useState(0);\n\n  const getUserPosts = useCallback(async () => {\n    try {\n      setIsPostListLoading(true);\n      setPosts(null);\n      setSelectedPostId(0);\n\n      let neededPosts;\n\n      if (filterByUserId === 0) {\n        neededPosts = await getUsersPosts();\n      } else {\n        neededPosts = await getUserPostsById(filterByUserId);\n      }\n\n      setPosts(neededPosts);\n    } catch (e) {\n      console.log(`can't load data from serever: ${e}`);\n    }\n\n    setIsPostListLoading(false);\n  }, [filterByUserId]);\n\n  useEffect(() => {\n    getUserPosts();\n  }, [filterByUserId]);\n\n  const removeCommentBtnClickHandler = useCallback((postId: number) => {\n    if (selectedPostId === postId) {\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n  }, [selectedPostId]);\n\n  return (\n    <>\n      <header className=\"PostsList__filter-props-block\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={filterByUserId}\n            onChange={({ target }) => {\n              setFilterByUserId(+target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      {!posts ? (\n        <h2>\n          No one posts is avalible\n        </h2>\n      )\n        : (\n          <div className=\"PostsList\">\n            <h2>Posts:</h2>\n\n            <ul className=\"PostsList__list\">\n              {posts.map((post) => (\n                <li\n                  key={post.id}\n                  className=\"PostsList__item\"\n                >\n                  <div>\n                    <b>\n                      [User #\n                      {post.userId}\n                      ]:\n                    </b>\n                    {post.title}\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      removeCommentBtnClickHandler(post.id);\n                    }}\n                  >\n                    {selectedPostId === post.id\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      {isPostListLoading && (\n        <Loader />\n      )}\n    </>\n  );\n});\n","import React, { useState } from 'react';\nimport { PostDetails } from './components/PostDetails';\nimport { PostsList } from './components/PostsList';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC<{}> = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n        {!!selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}